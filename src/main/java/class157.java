import java.util.zip.CRC32;
import org.openrs2.deob.annotation.OriginalClass;
import org.openrs2.deob.annotation.OriginalMember;

@OriginalClass("r")
public class class157 extends class85 {

    @OriginalMember(owner = "r", name = "R", descriptor = "Llf;")
    public static class109 field2949 = class35.method275("::qa_op_test", 2);

    @OriginalMember(owner = "r", name = "S", descriptor = "Llf;")
    public static class109 field2950 = class35.method275(":", 2);

    @OriginalMember(owner = "r", name = "W", descriptor = "Ljava/util/zip/CRC32;")
    public static CRC32 field2954 = new CRC32();

    @OriginalMember(owner = "r", name = "Y", descriptor = "I")
    public static int field2956 = 0;

    @OriginalMember(owner = "r", name = "db", descriptor = "[I")
    public static int[] field2961 = new int[] { 0, 1, 2, 3 };

    @OriginalMember(owner = "r", name = "ab", descriptor = "I")
    public static int field2958 = 5063219;

    @OriginalMember(owner = "r", name = "eb", descriptor = "Llf;")
    private static class109 field2962 = class35.method275("red:", 2);

    @OriginalMember(owner = "r", name = "Z", descriptor = "Llf;")
    public static class109 field2957 = field2962;

    @OriginalMember(owner = "r", name = "cb", descriptor = "Llf;")
    public static class109 field2960 = field2962;

    @OriginalMember(owner = "r", name = "bb", descriptor = "[[S")
    public static short[][] field2959 = new short[][] { { 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, -22182, -27211, -27198, -27186, -27302, 542, 555, 941, 951, 8076, 6936, 5675, 5440, 10014, 11179, 11197, 11096, 10258, 10776, 10661, 10419, -10984, -11095, -11072, -6630, -5467, -6473, -6838, -32318, -26069, -25925, -25669, 11202, 22193, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 4, 12, 24, 37, 49, 61, 74, 86, -25437, -26445, -27450, 9694, 21824, 123, 111, 99, 17814, 16801, 17837, 16697, 7341, 7496, 5330, 7384, 5268, 3230, 2223, 72, 10277, 8377, 8394, 7384, -22370, -22221, -22196, -22314, -29637, -27434, -29604, -25491, 662, 796, 933, 819, 10258, 6430, 5425, 5314, 10917, 10925, 10935, 10471, 10258, 10524, 10415, 10301, -11108, -11093, -11203, -8034, -5839, -6836, -5934, -32674, -14444, -15455, -15697, -15557, -15424, -11622, -11601, -11450, 7054, 7079, 5056, 6988, 8481, -30054, -30159, -30019, -21734, -21845, -21707, -21690, -21564, -24921, -24775, -24640, 662, 794, 811, 945, 827, 957, 5425, 5314, 11032, 10921, 11183, 11069, 11200, 4775, 3891, 3904, -18792, -19799, -20807, -20677, -20534, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 20366, 21274, 21415, 20401, 6569, 7613, 7630, 6364, 4300, 8412, 3294, 4193, 3303, 123, 111, 99, 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, 14990, 14746, 15779, 15795, 15944, 662, 796, 941, 951, 148, 6936, 5675, 5440, 10014, 11179, 11197, 10894, 10776, 10661, 10795, 10419, -10984, -11095, -11072, 12998, 12731, 11718, -6838, -32318, 4, 12, 24, 37, 49, 61, 74, 86 }, { 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, -22182, -27211, -27198, -27186, -27302, 542, 555, 941, 951, 8076, 6936, 5675, 5440, 10014, 11179, 11197, 11096, 10258, 10776, 10661, 10419, -10984, -11095, -11072, -6630, -5467, -6473, -6838, -32318, -26069, -25925, -25669, 11202, 22193, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 4, 12, 24, 37, 49, 61, 74, 86, -25437, -26445, -27450, 9694, 21824, 123, 111, 99, 17814, 16801, 17837, 16697, 7341, 7496, 5330, 7384, 5268, 3230, 2223, 72, 10277, 8377, 8394, 7384, -22370, -22221, -22196, -22314, -29637, -27434, -29604, -25491, 662, 796, 933, 819, 10258, 6430, 5425, 5314, 10917, 10925, 10935, 10471, 10258, 10524, 10415, 10301, -11108, -11093, -11203, -8034, -5839, -6836, -5934, -32674, -14444, -15455, -15697, -15557, -15424, -11622, -11601, -11450, 7054, 7079, 5056, 6988, 8481, -30054, -30159, -30019, -21734, -21845, -21707, -21690, -21564, -24921, -24775, -24640, 662, 794, 811, 945, 827, 957, 5425, 5314, 11032, 10921, 11183, 11069, 11200, 4775, 3891, 3904, -18792, -19799, -20807, -20677, -20534, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 20366, 21274, 21415, 20401, 6569, 7613, 7630, 6364, 4300, 8412, 3294, 4193, 3303, 123, 111, 99, 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, 14990, 14746, 15779, 15795, 15944, 662, 796, 941, 951, 148, 6936, 5675, 5440, 10014, 11179, 11197, 10894, 10776, 10661, 10795, 10419, -10984, -11095, -11072, 12998, 12731, 11718, -6838, -32318, 4, 12, 24, 37, 49, 61, 74, 86 }, { 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, -22182, -27211, -27198, -27186, -27302, 542, 555, 941, 951, 8076, 6936, 5675, 5440, 10014, 11179, 11197, 11096, 10258, 10776, 10661, 10419, -10984, -11095, -11072, -6630, -5467, -6473, -6838, -32318, -26069, -25925, -25669, 11202, 22193, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 4, 12, 24, 37, 49, 61, 74, 86, -25437, -26445, -27450, 9694, 21824, 123, 111, 99, 17814, 16801, 17837, 16697, 7341, 7496, 5330, 7384, 5268, 3230, 2223, 72, 10277, 8377, 8394, 7384, -22370, -22221, -22196, -22314, -29637, -27434, -29604, -25491, 662, 796, 933, 819, 10258, 6430, 5425, 5314, 10917, 10925, 10935, 10471, 10258, 10524, 10415, 10301, -11108, -11093, -11203, -8034, -5839, -6836, -5934, -32674, -14444, -15455, -15697, -15557, -15424, -11622, -11601, -11450, 7054, 7079, 5056, 6988, 8481, -30054, -30159, -30019, -21734, -21845, -21707, -21690, -21564, -24921, -24775, -24640, 662, 794, 811, 945, 827, 957, 5425, 5314, 11032, 10921, 11183, 11069, 11200, 4775, 3891, 3904, -18792, -19799, -20807, -20677, -20534, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 20366, 21274, 21415, 20401, 6569, 7613, 7630, 6364, 4300, 8412, 3294, 4193, 3303, 123, 111, 99, 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, 14990, 14746, 15779, 15795, 15944, 662, 796, 941, 951, 148, 6936, 5675, 5440, 10014, 11179, 11197, 10894, 10776, 10661, 10795, 10419, -10984, -11095, -11072, 12998, 12731, 11718, -6838, -32318, 4, 12, 24, 37, 49, 61, 74, 86 }, { 4300, 3294, 3303, 3264, 4506, 4382, 4387, 5293, 7622, 7384, 8412, 7496, 86, 123, 111, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 24, 37, 49, 61, 74, 86, -25437, -26445, -27450, 9694, 21824, 123, 111, 99, 17814, 16801, 17837, 16697, 7341, 7496, 5330, 7384, 5268, 3230, 2223, 72, 10277, 8377, 8394, 7384, -22370, -22221, -22196, -22314, -29637, -27434, -29604, -25491, 662, 796, 933, 819, 10258, 6430, 5425, 5314, 10917, 10925, 10935, 10471, 10258, 10524, 10415, 10301, -11108, -11093, -11203, -8034, -5839, -6836, -5934, -32674, -14444, -15455, -15697, -15557, -15424, -11622, -11601, -11450, 7054, 7079, 5056, 6988, 8481, -30054, -30159, -30019, -21734, -21845, -21707, -21690, -21564, -24921, -24775, -24640, 662, 794, 811, 945, 827, 957, 5425, 5314, 11032, 10921, 11183, 11069, 11200, 4775, 3891, 3904, -18792, -19799, -20807, -20677, -20534, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 20366, 21274, 21415, 20401, 6569, 7613, 7630, 6364, 4300, 8412, 3294, 4193, 3303, 123, 111, 99, 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, 14990, 14746, 15779, 15795, 15944, 662, 796, 941, 951, 148, 6936, 5675, 5440, 10014, 11179, 11197, 10894, 10776, 10661, 10795, 10419, -10984, -11095, -11072, 12998, 12731, 11718, -6838, -32318, 4, 12, 24, 37, 49, 61, 74, 86 }, { 18322, 17304, 16289, 15929, 6569, 7613, 7630, 6364, 7054, 7079, 5056, 6988, 8481, 7475, 7364, 8412, -21990, -21969, -21952, -22182, -27211, -27198, -27186, -27302, 542, 555, 941, 951, 8076, 6936, 5675, 5440, 10014, 11179, 11197, 11096, 10258, 10776, 10661, 10419, -10984, -11095, -11072, -6630, -5467, -6473, -6838, -32318, -26069, -25925, -25669, 11202, 22193, 123, 111, 99, 4, 12, 24, 37, 49, 61, 74, 86, 22461, -21571, 11200, 957, -10317, 5056, -31808, 123, 22453, -21579, 11191, 949, -10325, 4023, -31817, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20366, 20401, 662, 827, 7054, 5056, -21734, -21564, -14444, -15424, 11032, 11200, 4, 123, 61, -18792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4300, 3294, 3303, 3264, 4506, 4382, 4387, 5293, 8412, 8301, 8076, 6936, 5675, 941, 5056, 15795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

    @OriginalMember(owner = "r", name = "Q", descriptor = "I")
    public static int field2948;

    @OriginalMember(owner = "r", name = "T", descriptor = "I")
    public static int field2951;

    @OriginalMember(owner = "r", name = "U", descriptor = "I")
    public static int field2952;

    @OriginalMember(owner = "r", name = "V", descriptor = "I")
    public static int field2953;

    @OriginalMember(owner = "r", name = "fb", descriptor = "I")
    public static int field2963;

    @OriginalMember(owner = "r", name = "X", descriptor = "Lu;")
    public static class184 field2955;

    @OriginalMember(owner = "r", name = "gb", descriptor = "[Lch;")
    private class29[] field2964;

    @OriginalMember(owner = "r", name = "a", descriptor = "(ZBLfi;)V")
    public static final void method1071(boolean arg0, byte arg1, class60 arg2) {
        ++field2951;
        if (arg1 >= 112) {
            int var3 = (int) arg2.field1381;
            int var4 = arg2.field1174;
            arg2.method452(true);
            if (arg0) {
                class20.method182(-60, var4);
            }
            class209.method1362((byte) -64, var4);
            class200 var5 = class158.method1078(var3, (byte) 115);
            if (var5 != null) {
                class115.method851(var5, -23101);
            }
            class149.field2882 = 0;
            class51.field1041 = false;
            class193.method1294(class128.field2471, class105.field2093, class104.field2050, class111.field2190, 188);
            if (class4.field57 != -1) {
                class26.method218(1, 119, class4.field57);
            }
        }
    }

    @OriginalMember(owner = "r", name = "e", descriptor = "(I)I")
    public static final int method1072(int arg0) {
        if (arg0 != 662) {
            field2954 = null;
        }
        int var1 = class19.method180(class114.field2267, false, class72.field1405, class39.field836);
        ++field2953;
        return -class125.field2419 + var1 < 800 && ~(class88.field1827[class72.field1405][class39.field836 >> 7][class114.field2267 >> 7] & 4) != -1 ? class72.field1405 : 3;
    }

    @OriginalMember(owner = "r", name = "a", descriptor = "(II)[I")
    public final int[] method87(int arg0, int arg1) {
        if (arg0 > -49) {
            field2958 = 86;
        }
        int[] var3 = super.field1736.method835(-314, arg1);
        if (super.field1736.field2253) {
            this.method1074(0, super.field1736.method833((byte) -77));
        }
        ++field2952;
        return var3;
    }

    @OriginalMember(owner = "r", name = "f", descriptor = "(I)V")
    public static void method1073(int arg0) {
        field2961 = null;
        field2959 = null;
        field2949 = null;
        if (arg0 != 4382) {
            method1071(false, (byte) -115, (class60) null);
        }
        field2950 = null;
        field2955 = null;
        field2954 = null;
        field2960 = null;
        field2957 = null;
        field2962 = null;
    }

    @OriginalMember(owner = "r", name = "<init>", descriptor = "()V")
    public class157() {
        super(0, true);
    }

    @OriginalMember(owner = "r", name = "b", descriptor = "(II)[[I")
    public final int[][] method29(int arg0, int arg1) {
        if (arg1 != 2177) {
            return null;
        } else {
            int[][] var3 = super.field1719.method673((byte) -128, arg0);
            if (super.field1719.field1926) {
                int var4 = class57.field1152;
                int var5 = class38.field824;
                int[][] var6 = new int[var5][var4];
                int[][][] var7 = super.field1719.method677((byte) 94);
                this.method1074(0, var6);
                for (int var8 = 0; ~class38.field824 < ~var8; ++var8) {
                    int[] var9 = var6[var8];
                    int[][] var10 = var7[var8];
                    int[] var11 = var10[1];
                    int[] var12 = var10[0];
                    int[] var13 = var10[2];
                    for (int var14 = 0; var14 < class57.field1152; ++var14) {
                        int var15 = var9[var14];
                        var13[var14] = class170.method1140(var15, 255) << 4;
                        var11[var14] = class170.method1140(var15, 65280) >> 4;
                        var12[var14] = class170.method1140(var15 >> 12, 4080);
                    }
                }
            }
            ++field2948;
            return var3;
        }
    }

    @OriginalMember(owner = "r", name = "a", descriptor = "(I[[I)V")
    private final void method1074(int arg0, int[][] arg1) {
        int var3 = class57.field1152;
        ++field2963;
        int var4 = class38.field824;
        class9.method48((byte) 119, arg1);
        class95.method683(class150.field2892, arg0 ^ -3753, class29.field624, arg0, 0);
        if (this.field2964 != null) {
            for (int var5 = 0; var5 < this.field2964.length; ++var5) {
                class29 var6 = this.field2964[var5];
                int var7 = var6.field622;
                int var8 = var6.field617;
                if (var7 >= 0) {
                    if (var8 >= 0) {
                        var6.method234(var4, var3, -35);
                    } else {
                        var6.method236(var4, var3, (byte) 0);
                    }
                } else if (var8 >= 0) {
                    var6.method239(var3, 20396, var4);
                }
            }
        }
    }
}
